import { JetBrains_Mono } from "next/font/google"; // ✅ correcto
import "./globals.css";
// Components (comentario para diferenciar la importacion de los componentes)
import Header from "@/components/Header";
import PageTransition from "@/components/PageTransition";
import StairTransition from "@/components/StairTransition";

const jetbrainsMono = JetBrains_Mono({
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700", "800"],
  variable: "--font-jetbrainsMono",
});
/**
 * ¿Qué es renderizar (render) en React y Next.js?
Renderizar es el proceso de mostrar contenido en la pantalla (en el navegador).

En React, cuando hablamos de "render", nos referimos a que un componente produce su estructura HTML (o JSX) que luego se muestra en la interfaz.

Cada vez que un componente cambia (por ejemplo, porque cambian sus datos o propiedades), React lo re-renderiza, es decir, vuelve a ejecutar ese componente para actualizar lo que se ve.

React utiliza un sistema llamado Virtual DOM para hacer estos cambios de forma eficiente, actualizando solo lo que realmente cambió en la pantalla.

En Next.js, la renderización puede ser:

Renderizado del lado del servidor (SSR): La página se genera en el servidor y se envía al navegador ya lista.

Renderizado del lado del cliente (CSR): La página se genera en el navegador (React re-renderiza componentes según la interacción del usuario).

Usar la propiedad key en React ayuda a controlar cuándo un componente debe desmontarse y renderizarse de nuevo, permitiendo efectos como animaciones en transiciones de página.
 */
export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={jetbrainsMono.variable}>
        <Header />
        <StairTransition />
        <PageTransition>
          {children}
        </PageTransition>
      </body>
    </html>
  );
}
